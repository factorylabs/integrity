Integrity
=========

As soon as you push your commits, Integrity builds your code, run your tests
and makes sure everything works fine. It then reports the build status using
various notifiers back to you and your team so everyone is on the same page and
problems can be fixed right away.

Read more about about Continuous Integration on
http://martinfowler.com/articles/continuousIntegration.html[Martin Fowler's
website] and http://en.wikipedia.org/wiki/Continuous_Integration[Wikipedia].

== Installation
First of all, make sure to meet these prerequisites:

* Ruby >= 1.8.6
* RubyGems >= 1.3.5
* git >= 1.6

Then grab Integrity via git, install its dependencies and create the database:
[source, shell]
$ gem install bundler
$ git clone git://github.com/integrity/integrity
$ cd integrity
$ git checkout -b deploy v0.2.2
$ gem bundle --only default
$ ./bin/rake db

If you want give it a quick try before going any further, run `./bin/rackup`
and navigate to http://0.0.0.0:9292.

To upgrade, do this:
[source, shell]
$ git fetch origin
$ git merge origin/v0.2.2

== Configuration
Integrity is configured via the `init.rb` file using the Ruby syntax. Example:
[source, ruby]
----
Integrity.configure do |c|
  c.database  "sqlite3:integrity.db"
  c.directory "builds"
  c.base_url  "http://ci.example.org"
  c.log       "integrity.log"
  c.builder   :threaded, 5
  c.build_all!
end
----

=== Basic settings
database:: Any valid database URI supported by
http://datamapper.rubyforge.org/dm-core/DataMapper.html[DataMapper]. Examples:
* `sqlite3:integrity.db`
* `mysql://user:password@localhost/integrity`
* `postgres://user:password@localhost/integrity`

IMPORTANT: You need to install the appropriate `data_objects` adapter as well.
The SQLite3 adapter (`do_sqlite3`) is installed by default.

directory:: This is where your projects' code will be checked out. Make sure it
is writable by the user that runs Integrity.
base_url:: Absolute URL to your Integrity instance, *without* a trailing slash.
log:: Path to the Integrity log file; mostly useful for troubleshooting
build_all!:: Tells Integirty to build every single commit it is notified about.
Otherwise, it only builds the newest.
HTTP authentication:: If both the `user` and `pass` settings are set then only
the logged-in users can administer the projects and see the private ones.
Example:
[source, ruby]
----
c.user "admin"
c.pass "password"
----

To protect the whole Integrity instance do this in your `config.ru` file:
[source, ruby]
----
use Rack::Auth::Basic do |user, pass|
  user == "admin" && pass == "secret"
end
run Integrity.app
----

=== Automating the builds
Continuous integration must be automatic, ortherwise it probably won't work.
You can either setup http://github.com[GitHub] to notify Integrity of new
commits or a http://en.wikipedia.org/wiki/Cron[Cron] job that polls your
repository for new ones.

==== GitHub
Setup a
http://github.com/guides/post-receive-hooks[Post-Receive Hook] on your GitHub
repository pointing to http://ci.example.org/github/TOKEN and add this line to
your configuration:
[source, ruby]
c.github_token, "TOKEN"

==== Polling
Here is an example that triggers a build only when the git repository has new
commits:
[source, ruby]
----
require "init"
Integrity::Project.all.each { |project|
  project.build("HEAD") if project.blank? || `git ls-remote #{project.uri}`.
    include?("#{project.last_build.commit.identifier}\tHEAD")
}
----

=== Choosing a builder
Integrity ships with two ways of building your codes in the background.

==== Threaded
The +threaded+ builder pushes the build job to an in-memory queue and processes
them as soon as possible. It relies on Ruby's thread so it doesn't have any
dependency nor need any external process to be run.
[source, ruby]
c.builder :threaded, 5

The second argument is the size of the thread pool. The bigger, the more jobs
it can process in parralel.

==== Delayed::Job
The +dj+ builder queue the build jobs into a SQL database using
http://github.com/tobi/delayed_job[Delayed::Job]. To use it, install its
dependencies by uncommenting the relevant lines in the `Gemfile` and
running `gem bundle`.
[source, ruby]
c.builder :dj, :adapter => "sqlite3", :database => "dj.db"

The option hash can be any valid
http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M002364[ActiveRecord
connection hash].

Run a worker with `./bin/rake jobs:work`. Please See
http://github.com/tobi/delayed_job#readme[dj's documentation] for more details.

== Notification
After a build status is available, you want to know it **immediately**,
Integrity currently supports three notification mediums: Email,
http://en.wikipedia.org/wiki/IRC[IRC] and http://campfirenow.com[Campfire].
To setup and use one of these with your projects:

1. Open the `Gemfile`, uncomment the relevant lines and run `gem bundle` to
   install the notifier's dependencies.
2. Edit the `init.rb` file to require it. Example:
+
[source, ruby]
----
require "integrity"
# You need to add this line:
require "integrity/notifier/email"
----
+
3. Restart Integrity and go to the project settings screen where you can
   enable and configure the notifier.

== Deployment
=== http://heroku.com[Heroku]
Heroku is the easiest and fastest way to deploy Integrity.

[source, shell]
$ cp doc/heroku.rb init.rb
$ git commit -am "Configured for Heroku"
$ gem install heroku
$ heroku create
$ git push heroku master
$ heroku rake db
$ heroku open

NOTE: It isn't possible to access repositories over SSH due to Heroku's
      architecture.

=== http://modrails.com[Phusion Passenger]
Please see Passenger's documentation for
http://www.modrails.com/documentation/Users%20guide%20Apache.html[Apache] and
http://www.modrails.com/documentation/Users%20guide%20Nginx.html[Nginx].

=== http://code.macournoyer.com/thin/[Thin]
[source, shell]
$ gem install thin
$ $EDITOR doc/thin.yml
$ thin -C doc/thin.yml start

Then, configure a web proxy. Examples:

.Nginx as a reverse-proxy
----
http {
  upstream builder-integrityapp-com {
  server 127.0.0.1:8910;
  server 127.0.0.1:8911;
}

server {
  server_name builder.integrityapp.com;
  location / {
    proxy_pass http://builder-integrityapp-com;
  }
}
----

.Apache acting as reverse proxy to a cluster of thin instances
----
<VirtualHost *>
  <Proxy>
    Order deny,allow
    Allow from all
  </Proxy>

  RedirectMatch ^/integrity$ /integrity/
  ProxyRequests Off
  ProxyPass /integrity/ http://localhost:8910/
  ProxyHTMLURLMap http://localhost:8910 /integrity

  <Location /integrity>
    ProxyPassReverse /
    SetOutputFilter proxy-html
    ProxyHTMLURLMap / /integrity/
    ProxyHTMLURLMap /integrity/ /integrity
  </Location>
</VirtualHost>
----

NOTE: If you run Integrity with another deployment strategy please drop us
      us a line at <info@integrityapp.com> and let us know what config
      worked for you so we can include it here.

== Support / Contributing
You can get in touch via IRC at irc://irc.freenode.net/integrity[#integrity on
freenode]. If no one happens to be around, you can ask by emailing our mailing
list at integrity@librelist.com.

If you find a bug, or want to give us a feature request, log it into our
http://github.com/integrity/integrity/issues[bug tracker].

To start hacking, grab the code from our git repository at
`git://github.com/integrity/integrity.git` and setup the dependencies with
`gem bundle`. Finally, hack and `./bin/rake` as usual ;-)

Once you're done, make sure your changes are rebased on on top of the `master`
branch and open a new ticket in our bug tracker to let us know where we
can pull from.

== See Also
* http://integrity-menu.com[Integrity Menu] â€” a dashboard widget for Mac OS X
  that shows the current status of projects being managed by Integrity.
  http://metric-fu.rubyforge.org[metric_fu].
* http://devver.net/caliper[Caliper], a service of http://devver.net[Devver]
  that provides easy Ruby metrics.

== FAQ
=== Does it support Subversion or any other SCM?
[[faq-scm]]
No. Integrity only supports http://git-scm.org[git].

=== But does it work with <insert tech here>?
[[faq-tech]]
**Absolutely!** As long as your build process can be run from an UNIX-y
environment and that it returns a *zero* status code for success and
*non-zero* for failure, then Integrity works for you.

// vim: set syntax=asciidoc:
